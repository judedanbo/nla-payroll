<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Fortify\TwoFactorAuthenticatable;
use Spatie\Permission\Traits\HasRoles;

class User extends Authenticatable
{
    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasFactory, HasRoles, Notifiable, TwoFactorAuthenticatable;

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'two_factor_secret',
        'two_factor_recovery_codes',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
            'two_factor_confirmed_at' => 'datetime',
        ];
    }

    // ============================================
    // Headcount Verification Relationships
    // ============================================

    /**
     * Get headcount verifications created by this user.
     */
    public function createdVerifications(): HasMany
    {
        return $this->hasMany(HeadcountVerification::class, 'created_by');
    }

    /**
     * Get headcount verifications verified by this user.
     */
    public function verifiedVerifications(): HasMany
    {
        return $this->hasMany(HeadcountVerification::class, 'verified_by');
    }

    /**
     * Get headcount verifications approved by this user.
     */
    public function approvedVerifications(): HasMany
    {
        return $this->hasMany(HeadcountVerification::class, 'approved_by');
    }

    /**
     * Get verification photos uploaded by this user.
     */
    public function uploadedPhotos(): HasMany
    {
        return $this->hasMany(VerificationPhoto::class, 'uploaded_by');
    }

    /**
     * Get verification notes created by this user.
     */
    public function verificationNotes(): HasMany
    {
        return $this->hasMany(VerificationNote::class, 'created_by');
    }

    // ============================================
    // Discrepancy Relationships
    // ============================================

    /**
     * Get discrepancies detected by this user.
     */
    public function detectedDiscrepancies(): HasMany
    {
        return $this->hasMany(Discrepancy::class, 'detected_by');
    }

    /**
     * Get discrepancy notes created by this user.
     */
    public function discrepancyNotes(): HasMany
    {
        return $this->hasMany(DiscrepancyNote::class, 'created_by');
    }

    /**
     * Get discrepancy resolutions resolved by this user.
     */
    public function resolvedDiscrepancies(): HasMany
    {
        return $this->hasMany(DiscrepancyResolution::class, 'resolved_by');
    }

    // ============================================
    // Import Relationships
    // ============================================

    /**
     * Get import histories uploaded by this user.
     */
    public function importHistories(): HasMany
    {
        return $this->hasMany(ImportHistory::class, 'uploaded_by');
    }

    // ============================================
    // System Relationships
    // ============================================

    /**
     * Get audit logs performed by this user.
     */
    public function auditLogs(): HasMany
    {
        return $this->hasMany(AuditLog::class);
    }

    /**
     * Get notifications for this user.
     */
    public function notifications(): HasMany
    {
        return $this->hasMany(Notification::class);
    }

    /**
     * Get unread notifications for this user.
     */
    public function unreadNotifications(): HasMany
    {
        return $this->notifications()->whereNull('read_at');
    }

    /**
     * Get team assignments for this user.
     */
    public function teamAssignments(): HasMany
    {
        return $this->hasMany(TeamAssignment::class);
    }

    /**
     * Get active team assignments for this user.
     */
    public function activeTeamAssignments(): HasMany
    {
        return $this->teamAssignments()->where('status', 'active');
    }

    /**
     * Get team assignments created by this user.
     */
    public function createdTeamAssignments(): HasMany
    {
        return $this->hasMany(TeamAssignment::class, 'assigned_by');
    }

    /**
     * Get reports generated by this user.
     */
    public function generatedReports(): HasMany
    {
        return $this->hasMany(Report::class, 'generated_by');
    }

    // ============================================
    // Helper Methods
    // ============================================

    /**
     * Check if the user has any active team assignments.
     */
    public function hasActiveAssignments(): bool
    {
        return $this->activeTeamAssignments()->exists();
    }

    /**
     * Check if the user has unread notifications.
     */
    public function hasUnreadNotifications(): bool
    {
        return $this->unreadNotifications()->exists();
    }

    /**
     * Get the count of unread notifications.
     */
    public function getUnreadNotificationsCount(): int
    {
        return $this->unreadNotifications()->count();
    }

    /**
     * Mark all notifications as read.
     */
    public function markAllNotificationsAsRead(): int
    {
        return $this->unreadNotifications()->update(['read_at' => now()]);
    }

    /**
     * Check if the user is an auditor (has active team assignments).
     */
    public function isAuditor(): bool
    {
        return $this->hasActiveAssignments();
    }

    /**
     * Get the user's initials (for avatar display).
     */
    public function getInitials(): string
    {
        $names = explode(' ', $this->name);

        if (count($names) === 1) {
            return strtoupper(substr($names[0], 0, 2));
        }

        return strtoupper(substr($names[0], 0, 1).substr(end($names), 0, 1));
    }
}
